{"version":3,"sources":["components/modal.js","state_manager/actions/user_details/user_message.js","state_manager/actions/user_details/update_msg.js","components/chatbot.js","state_manager/reducers/user_controls.js","state_manager/reducers/index.js","state_manager/config/store.js","reportWebVitals.js","index.js"],"names":["Modalpopup","props","useState","currentValue","setCurrentValue","title","centered","visible","onOk","offmodal","onCancel","width","size","placeholder","suffix","PlusOutlined","value","onChange","evt","currentTarget","USER_MSG","newMsg","dispatch","type","payload","UPDATE_MSG","updateMsg","msdId","getState","updatedMsg","userDetails","chatHistory","filter","ele","messageId","messageHistory","unshift","timeStamp","Date","msg","Header","Layout","Footer","Content","Sider","Chatbot","formRef","state","onFinish","values","userMessage","now","message","randomMsg","randomText","Math","floor","random","length","setTimeout","current","resetFields","onFinishFailed","errorInfo","console","log","this","className","map","index","color","onDoubleClick","setState","name","layout","initialValues","remember","ref","Item","valueText","Component","connect","bindActionCreators","action","newState","combineReducers","store","middleware","applyMiddleware","thunk","logger","enchancer","compose","persistState","key","finalStore","createStore","finalReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0e8062a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Modal } from 'antd';\r\nimport { Input } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\nexport default function Modalpopup(props) {\r\n    const [currentValue, setCurrentValue] = useState(props.currentValue)\r\n    return (\r\n        <Modal\r\n            title=\"Edit Message\"\r\n            centered\r\n            visible={true}\r\n            onOk={() => props.offmodal(currentValue)}\r\n            onCancel={() => props.offmodal()}\r\n            width={300}\r\n        >\r\n            <Input size=\"large\"\r\n                placeholder={'Type your message...'}\r\n                suffix={<PlusOutlined />}\r\n                value={currentValue}\r\n                onChange={(evt) => setCurrentValue(evt.currentTarget.value)} />\r\n        </Modal>\r\n    )\r\n}","\r\nexport const USER_MSG = \"user/newmsg\";\r\n\r\nexport default (newMsg) => (dispatch) => {\r\n  dispatch({\r\n    type:USER_MSG,\r\n    payload: {\r\n      newMsg\r\n    }\r\n  })\r\n};\r\n","\r\nexport const UPDATE_MSG = \"user/messagesupdate\";\r\n\r\nexport default (updateMsg, msdId) => (dispatch, getState) => {\r\n  const { userDetails: { chatHistory } } = getState();\r\n  const updatedMsg = chatHistory.filter(ele => {\r\n    if (ele.messageId === msdId) ele.messageHistory.unshift({\r\n      timeStamp: new Date(),\r\n      msg: updateMsg\r\n    });\r\n    return true\r\n  });\r\n\r\n  dispatch({\r\n    type: UPDATE_MSG,\r\n    payload: {\r\n      updatedMsg\r\n    }\r\n  })\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Layout, Form, Input, Tooltip } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport Modalpopup from './modal';\r\nimport userMessage from '../state_manager/actions/user_details/user_message';\r\nimport updateMsg from '../state_manager/actions/user_details/update_msg';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport './App.css';\r\n\r\nimport randomText from './random_text.json';\r\n\r\nconst { Header, Footer, Sider, Content } = Layout;\r\n\r\nclass Chatbot extends Component {\r\n  formRef = {}\r\n  state = { currentValue: '' }\r\n  componentDidMount() {\r\n    if (this.props.chatHistory.length < 3) this.props.userMessage({ messageId: Date.now(), messageHistory: [{ timeStamp: new Date(), msg: 'Nice to see you.' }], type: 'income' });\r\n  }\r\n  onFinish = (values) => {\r\n    this.props.userMessage({ messageId: Date.now(), messageHistory: [{ timeStamp: new Date(), msg: values.message }], type: 'out_going' });\r\n    const randomMsg = randomText[Math.floor(Math.random() * randomText.length)];\r\n\r\n    setTimeout(() => {\r\n      this.props.userMessage({ messageId: Date.now(), messageHistory: [{ timeStamp: new Date(), msg: randomMsg }], type: 'income' });\r\n    }, 1000);\r\n\r\n    this.formRef.current.resetFields();\r\n  }\r\n\r\n  onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className={'app-conatiner'}>\r\n        <Layout className={'app-wrapper'}>\r\n          <Header>Justin</Header>\r\n          <Content>\r\n            <div className={'app-msg-wrapper'}>\r\n              {\r\n                this.props.chatHistory.map((ele, index) =>\r\n\r\n                  ele.type === 'income' ? <div className={`income messages`} key={index}>{ele.messageHistory[0].msg}</div> :\r\n                    <Tooltip title=\"Double click to edit\" color={'#108ee9'}>\r\n                      <div className={`out_going messages`} key={index} onDoubleClick={() => this.setState({ currentValue: ele })}>{ele.messageHistory[0].msg}</div>\r\n                    </Tooltip>\r\n                )\r\n              }\r\n            </div>\r\n          </Content>\r\n          <Footer>\r\n            <Form\r\n              name=\"basic\"\r\n              layout={'inline'}\r\n              initialValues={{\r\n                remember: true,\r\n              }}\r\n              onFinish={this.onFinish}\r\n              onFinishFailed={this.onFinishFailed}\r\n              ref={this.formRef}\r\n            >\r\n              <Form.Item\r\n                name={'message'}\r\n              >\r\n                <Input size=\"large\" placeholder={'Type your message...'} className={'msg-typer'} suffix={<PlusOutlined />} />\r\n              </Form.Item>\r\n            </Form>\r\n\r\n          </Footer>\r\n        </Layout>\r\n        {this.state.currentValue !== '' && <Modalpopup\r\n          currentValue={this.state.currentValue.messageHistory[0].msg}\r\n          offmodal={(valueText) => {\r\n            if (valueText) this.props.updateMsg(valueText, this.state.currentValue.messageId)\r\n            this.setState({ currentValue: '' })\r\n          }} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst maptheStore = ({ userDetails }) => {\r\n  const { chatHistory } = userDetails;\r\n  return {\r\n    chatHistory: [...chatHistory]\r\n  };\r\n};\r\n\r\nconst actionDispatcher = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      userMessage,\r\n      updateMsg\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  maptheStore,\r\n  actionDispatcher\r\n)(Chatbot)","\r\nimport { USER_MSG } from \"../actions/user_details/user_message\";\r\nimport { UPDATE_MSG } from \"../actions/user_details/update_msg\";\r\n\r\n\r\nconst userDetails = (state = {}, action) => {\r\n  let newState = state;\r\n  switch (action.type) {\r\n    case USER_MSG:\r\n\r\n      newState = {\r\n        ...newState,\r\n        chatHistory:[...state.chatHistory,{...action.payload.newMsg}]\r\n      };\r\n      break;\r\n    case UPDATE_MSG:\r\n\r\n      newState = {\r\n        ...newState,\r\n        chatHistory:[...action.payload.updatedMsg]\r\n      };\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n  return newState;\r\n};\r\n\r\nexport default userDetails;\r\n","import { combineReducers } from \"redux\";\r\nimport userDetails from \"./user_controls\";\r\n\r\nexport default combineReducers({\r\n  userDetails\r\n});\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport persistState from 'redux-localstorage';\r\nimport finalReducer from '../reducers';\r\n\r\nconst store = {\r\n  userDetails: {\r\n    chatHistory:[\r\n      {\r\n        messageId: Date.now(),\r\n        messageHistory: [\r\n          {\r\n            timeStamp:new Date(),\r\n            msg:'Hi'\r\n          }\r\n        ],\r\n        type: \"income\" },\r\n        {\r\n        messageId: Date.now(),\r\n        messageHistory: [{\r\n          timeStamp:new Date(),\r\n          msg:'Hello'\r\n        }],\r\n        type: \"out_going\"}\r\n        \r\n    ]\r\n  }\r\n};\r\nconst middleware = applyMiddleware(thunk, logger);\r\nconst enchancer = compose(middleware, persistState(null, {\r\n  key: 'chatApp'\r\n}));\r\nconst finalStore = createStore(finalReducer, store, enchancer);\r\n\r\nexport default finalStore;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport Chatbot from './components/chatbot';\r\nimport store from './state_manager/config/store';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Chatbot />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}